{
  "language": "Solidity",
  "sources": {
    "@switchboard-xyz/evm.js/contracts/Aggregator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {ISwitchboardPush} from \"./ISwitchboardPush.sol\";\n\n// CLASSIC PUSH ADAPTER INTERFACE\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ncontract Aggregator is AggregatorV3Interface {\n    // errors\n    error RoundEmpty(bytes32 feedName, uint80 roundId);\n\n    address public switchboardPricesContract;\n    address public feedId;\n    bytes32 public feedName;\n    string public name;\n    string public description;\n\n    constructor(\n        address _switchboard, // Switchboard contract address\n        address _feedId,\n        bytes32 _feedName, // Function id corresponding to the feed\n        string memory _name, // Name of the feed\n        string memory _description\n    ) {\n        switchboardPricesContract = _switchboard;\n        feedId = _feedId;\n        feedName = _feedName;\n        name = _name;\n        description = _description;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return 18;\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        // Get round data / Check if the round exists\n        (\n            roundId,\n            answer,\n            startedAt,\n            updatedAt,\n            answeredInRound\n        ) = viewRoundData(_roundId);\n        if (updatedAt == 0) {\n            revert RoundEmpty(feedName, roundId);\n        }\n    }\n\n    function latestRoundData()\n        external\n        view\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        roundId = ISwitchboardPush(switchboardPricesContract)\n            .feeds(feedName)\n            .latestIntervalId;\n        if (roundId == 0) {\n            revert RoundEmpty(feedName, 0);\n        }\n        return viewLatestRoundData();\n    }\n\n    // View Functions (for off-chain use / no protection from empty rounds)\n    function viewRoundData(\n        uint80 _roundId\n    )\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        ISwitchboardPush.Feed memory feed = ISwitchboardPush(\n            switchboardPricesContract\n        ).feeds(feedName);\n        ISwitchboardPush.Result memory result;\n\n        if (_roundId == feed.latestIntervalId) {\n            result = feed.latestResult;\n        } else {\n            result = ISwitchboardPush(switchboardPricesContract).results(\n                feedName,\n                _roundId\n            );\n        }\n\n        answer = result.value;\n        startedAt = result.startedAt;\n        updatedAt = result.updatedAt;\n        roundId = _roundId;\n        answeredInRound = _roundId;\n    }\n\n    function viewLatestRoundData()\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        ISwitchboardPush.Result memory result = ISwitchboardPush(\n            switchboardPricesContract\n        ).feeds(feedName).latestResult;\n        answer = result.value;\n        startedAt = result.startedAt;\n        updatedAt = result.updatedAt;\n        roundId = roundId;\n        answeredInRound = roundId;\n    }\n}\n"
    },
    "@switchboard-xyz/evm.js/contracts/ISwitchboardPush.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Source can be found at https://github.com/switchboard-xyz/evm-functions-template/tree/main/rust/01_price_oracle/SwitchboardPushReceiver/contracts/src/SwitchboardPushReceiver\ninterface ISwitchboardPush {\n    //=========================================================================\n    // Events\n    //=========================================================================\n\n    // emitted when a new result lands for a feed\n    event NewResult(\n        bytes32 indexed feedId,\n        uint80 indexed roundId,\n        int256 value,\n        uint256 timestamp\n    );\n\n    // emitted when a new adapter is deployed\n    event NewAdapter(\n        bytes32 indexed feedId,\n        address indexed adapter,\n        address indexed sender\n    );\n\n    // emitted when latestResult is called\n    event ReadEvent(\n        address indexed feedId,\n        address indexed sender,\n        int256 value,\n        uint256 timestamp\n    );\n\n    //=========================================================================\n    // Structs\n    //=========================================================================\n\n    struct Result {\n        int256 value;\n        uint256 startedAt;\n        uint256 updatedAt;\n    }\n\n    struct Feed {\n        address feedId;\n        bytes32 feedName;\n        uint80 latestIntervalId;\n        Result latestResult; // used by default for getLatestResult\n        bool historyEnabled; // by default off so we don't store all feed histories for all 500+ feeds forever\n        bool latestResultFailed;\n    }\n\n    //=========================================================================\n    // Functions\n    //=========================================================================\n\n    /**\n     * deployFeedAdapter\n     * Compatible with AggregatorV3 Interface\n     * @param feedId feed id to deploy an adapter for\n     * @param name name embedded in the AggregatorV3 adapter\n     * @param description description embedded in the adapter\n     * emits NewAdapter which can be used to get the adapter address\n     *\n     * Adapter source can be found at https://github.com/switchboard-xyz/evm-functions-template/blob/main/rust/01_price_oracle/SwitchboardPushReceiver/contracts/src/SwitchboardPushReceiver/Receiver/Aggregator.sol\n     */\n    function deployFeedAdapter(\n        address feedId,\n        string memory name,\n        string memory description\n    ) external;\n\n    /**\n     * getLatestResult\n     * @param feedId feed id to get the latest result for\n     * @return value latest value\n     * @return timestamp timestamp of the latest value\n     * @return updatedAt block.timestamp of the last update\n     */\n    function getLatestResult(\n        address feedId\n    )\n        external\n        returns (\n            int256 value,\n            uint256 timestamp,\n            uint256 updatedAt,\n            uint80 intervalId\n        );\n\n    //=========================================================================\n    // Extra View Functions\n    //=========================================================================\n\n    function results(\n        bytes32 feedName,\n        uint80 intervalId\n    ) external view returns (Result memory);\n\n    function feeds(bytes32 feedName) external view returns (Feed memory);\n\n    function getAllFeeds() external view returns (Feed[] memory);\n\n    function latestTimestamp() external view returns (uint256);\n}\n"
    },
    "contracts/implementation/ChainlinkOracleWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IOracleWrapper.sol\";\nimport \"@switchboard-xyz/evm.js/contracts/Aggregator.sol\";\n\n\ncontract ChainlinkOracleWrapper is IOracleWrapper, AggregatorV3Interface {\n    // errors\n\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        // Ensure the string is not longer than 32 bytes\n        require(bytes(source).length <= 32, \"Source string too long\");\n        // Cast the string to bytes32 and return\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    error RoundEmpty(bytes32 feedName, uint80 roundId);\n\n    address public switchboardPricesContract;\n    address public feedId;\n    bytes32 public feedName;\n    string public name;\n    string public description;\n    address private _deployer;\n    Aggregator public aggregrator;\n    constructor(\n        address _switchboard, // Switchboard contract address\n        address _feedId,\n        string memory _feedName, // Function id corresponding to the feed\n        string memory _name, // Name of the feed\n        string memory _description\n    ) {\n        switchboardPricesContract = _switchboard;\n        feedId = _feedId;\n        feedName = stringToBytes32(_feedName);\n        name = _name;\n        description = _description;\n        _deployer = msg.sender;\n        aggregrator = new Aggregator(\n            _switchboard,\n            _feedId,\n            stringToBytes32(_feedName),\n            _name,\n            _description\n        );\n    }\n\n    function decimals() external pure override(IOracleWrapper, AggregatorV3Interface) returns (uint8) {\n        return 18;\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function viewLatestRoundData() external view returns (uint80, int256, uint256, uint256, uint80) {\n        return aggregrator.viewLatestRoundData();\n    }\n\n    function viewRoundData(uint80 _roundId) external view returns (uint80, int256, uint256, uint256, uint80) {\n        return aggregrator.viewRoundData(_roundId);\n    }\nfunction getPrice() external view override returns (int256) {\n    (, int256 price, , , ) = aggregrator.viewLatestRoundData();\n    return price;\n}\n\nfunction getPriceAndMetadata() external view override returns (int256 _price, bytes memory _data) {\n    (, _price, , , ) = aggregrator.viewLatestRoundData();\n    return (_price, _data);\n\n}\n\nfunction latestRoundData() external view override returns (uint80, int256, uint256, uint256, uint80) {\n    return aggregrator.viewLatestRoundData();\n\n}\nfunction getRoundData(uint80 _roundId) external view override returns (uint80, int256, uint256, uint256, uint80) {\n    return aggregrator.viewRoundData(_roundId);\n\n}\n\n\nfunction fromWad(int256 wad) external view override returns (int256) {\n    return wad / 10**18;\n\n}\n\nfunction poll() external override returns (int256) {\n    (, int256 price, , , ) = aggregrator.viewLatestRoundData();\n    return price;\n\n}\n\nfunction oracle() external view override returns (address) {\n    return address(aggregrator);\n\n}\n\nfunction deployer() external view override returns (address) {\n    return _deployer;\n\n}\n\n\n\n}"
    },
    "contracts/interfaces/IOracleWrapper.sol": {
      "content": "//SPDX-License-Identifier: CC-BY-NC-ND-4.0\npragma solidity 0.8.9;\n\n/// @title The oracle wrapper contract interface\ninterface IOracleWrapper {\n    function oracle() external view returns (address);\n\n    function decimals() external view returns (uint8);\n\n    function deployer() external view returns (address);\n\n    // #### Functions\n\n    /**\n     * @notice Returns the current price for the asset in question\n     * @return The latest price\n     */\n    function getPrice() external view returns (int256);\n\n    /**\n     * @return _price The latest round data price\n     * @return _data The metadata. Implementations can choose what data to return here\n     */\n    function getPriceAndMetadata() external view returns (int256 _price, bytes memory _data);\n\n    /**\n     * @notice Converts from a WAD to normal value\n     * @return Converted non-WAD value\n     */\n    function fromWad(int256 wad) external view returns (int256);\n\n    /**\n     * @notice Updates the underlying oracle state and returns the new price\n     * @dev Spot oracles must implement but it will be a no-op\n     */\n    function poll() external returns (int256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}